<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1540.v295eccc9778f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2258.v4e96d2b_da_f9b_"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2258.v4e96d2b_da_f9b_">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.44.0">
      <projectUrl>https://github.com/kautsarakasyah/fp-development-automation.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4169.vb_7e492a_1c7b_e">
    <script>pipeline {
  agent any

  environment {
    DOCKERHUB_CREDENTIALS = credentials(&apos;dockerhub-creds&apos;)
    TELEGRAM_BOT_TOKEN = credentials(&apos;TELEGRAM_BOT_TOKEN&apos;)
    TELEGRAM_CHAT_ID = credentials(&apos;TELEGRAM_CHAT_ID&apos;)
    JWT_SECRET = credentials(&apos;jwt-secret&apos;)
    NEXT_PUBLIC_APP_URL = credentials(&apos;frontend-url&apos;)
    OPENSHIFT_TOKEN = credentials(&apos;openshift-token&apos;)
    OPENSHIFT_SERVER = credentials(&apos;openshift-server&apos;)
    JENKINS_URL = &apos;https://c8f3fe8b4c2d.ngrok-free.app&apos;
  }

  stages {
    stage(&apos;Checkout&apos;) {
      steps {
        checkout([$class: &apos;GitSCM&apos;,
          branches: [[name: &apos;*/main&apos;]],
          userRemoteConfigs: [[
            url: &apos;https://github.com/kautsarakasyah/fp-development-automation.git&apos;,
            credentialsId: &apos;github-creds&apos;
          ]]
        ])
      }
    }

    stage(&apos;Debug Workspace&apos;) {
      steps {
        echo &apos;üîç Menampilkan struktur folder workspace:&apos;
        sh &apos;ls -al&apos;
        echo &apos;üîç Menampilkan isi folder fp-frondend-fix:&apos;
        sh &apos;ls -al fp-frondend-fix || echo &quot;‚ùå Folder fp-frondend-fix tidak ditemukan!&quot;&apos;
      }
    }

    stage(&apos;Build &amp; Push Frontend Docker Image&apos;) {
      steps {
        dir(&apos;fp-frondend-fix&apos;) {
          echo &apos;üì¶ Membuat Docker image dengan JWT dan APP_URL&apos;
          sh &quot;&quot;&quot;
            docker build \
              --build-arg JWT_SECRET=$JWT_SECRET \
              --build-arg NEXT_PUBLIC_APP_URL=$NEXT_PUBLIC_APP_URL \
              -t kautsarakasyah/fp-frontend:latest .
          &quot;&quot;&quot;

          withCredentials([usernamePassword(credentialsId: &apos;dockerhub-creds&apos;, usernameVariable: &apos;USER&apos;, passwordVariable: &apos;PASS&apos;)]) {
            sh &apos;echo $PASS | docker login -u $USER --password-stdin&apos;
            sh &apos;docker push kautsarakasyah/fp-frontend:latest&apos;
          }
        }
      }
    }

    stage(&apos;Deploy to OpenShift&apos;) {
      steps {
        echo &apos;üöÄ Melakukan deploy ke OpenShift...&apos;
        sh &quot;&quot;&quot;
          oc login $OPENSHIFT_SERVER --token=$OPENSHIFT_TOKEN --insecure-skip-tls-verify=true
          oc rollout restart deployment fp-frontend -n final-app-deployment
        &quot;&quot;&quot;
      }
    }
  }

  post {
    success {
      sh &quot;&quot;&quot;
        curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
        -d chat_id=$TELEGRAM_CHAT_ID \
        -d text=&apos;‚úÖ *Deploy frontend sukses!*&apos; \
        -d parse_mode=Markdown
      &quot;&quot;&quot;
    }
    failure {
      sh &quot;&quot;&quot;
        curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
        -d chat_id=$TELEGRAM_CHAT_ID \
        -d text=&apos;‚ùå *Deploy frontend gagal!*&apos; \
        -d parse_mode=Markdown
      &quot;&quot;&quot;
    }
  }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>